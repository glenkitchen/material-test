[{"C:\\dev\\material-table-test\\src\\App.tsx":"1","C:\\dev\\material-table-test\\src\\material-table\\components\\m-table-action.js":"2","C:\\dev\\material-table-test\\src\\material-table\\components\\m-table-body-row.js":"3","C:\\dev\\material-table-test\\src\\index.tsx":"4","C:\\dev\\material-table-test\\src\\material-table\\utils\\data-manager.js":"5","C:\\dev\\material-table-test\\src\\material-table\\components\\m-table-filter-row.js":"6","C:\\dev\\material-table-test\\src\\material-table\\index.js":"7","C:\\dev\\material-table-test\\src\\material-table\\components\\m-table-groupbar.js":"8","C:\\dev\\material-table-test\\src\\material-table\\material-table.js":"9","C:\\dev\\material-table-test\\src\\material-table\\default-props.js":"10","C:\\dev\\material-table-test\\src\\material-table\\components\\index.js":"11","C:\\dev\\material-table-test\\src\\material-table\\utils\\polyfill\\index.js":"12","C:\\dev\\material-table-test\\src\\material-table\\utils\\common-values.js":"13","C:\\dev\\material-table-test\\src\\material-table\\components\\m-table-header.js":"14","C:\\dev\\material-table-test\\src\\material-table\\components\\m-table-stepped-pagination.js":"15","C:\\dev\\material-table-test\\src\\material-table\\prop-types.js":"16","C:\\dev\\material-table-test\\src\\material-table\\utils\\polyfill\\array.find.js":"17","C:\\dev\\material-table-test\\src\\material-table\\components\\m-table-edit-row.js":"18","C:\\dev\\material-table-test\\src\\material-table\\components\\m-table-body.js":"19","C:\\dev\\material-table-test\\src\\material-table\\components\\m-table-toolbar.js":"20","C:\\dev\\material-table-test\\src\\components\\TableSearch.tsx":"21","C:\\dev\\material-table-test\\src\\components\\TableToolbar.tsx":"22","C:\\dev\\material-table-test\\src\\material-table\\utils\\index.js":"23","C:\\dev\\material-table-test\\src\\components\\index.ts":"24","C:\\dev\\material-table-test\\src\\components\\ColumnsButton.tsx":"25","C:\\dev\\material-table-test\\src\\components\\ExportButton.tsx":"26","C:\\dev\\material-table-test\\src\\components\\TableTitle.tsx":"27","C:\\dev\\material-table-test\\src\\material-table\\components\\m-table-pagination.js":"28","C:\\dev\\material-table-test\\src\\utils\\export-data.ts":"29","C:\\dev\\material-table-test\\src\\mock-data.ts":"30","C:\\dev\\material-table-test\\src\\mock-columns.ts":"31","C:\\dev\\material-table-test\\src\\material-table\\components\\m-table-cell.js":"32","C:\\dev\\material-table-test\\src\\material-table\\components\\m-table-edit-field.js":"33","C:\\dev\\material-table-test\\src\\material-table\\components\\m-table-group-row.js":"34","C:\\dev\\material-table-test\\src\\material-table\\components\\m-table-edit-cell.js":"35"},{"size":899,"mtime":1607312102313,"results":"36","hashOfConfig":"37"},{"size":2207,"mtime":1602565526655,"results":"38","hashOfConfig":"37"},{"size":17090,"mtime":1602565526655,"results":"39","hashOfConfig":"37"},{"size":500,"mtime":1606395604374,"results":"40","hashOfConfig":"37"},{"size":31214,"mtime":1606824786105,"results":"41","hashOfConfig":"37"},{"size":9895,"mtime":1606554406210,"results":"42","hashOfConfig":"37"},{"size":793,"mtime":1606544489227,"results":"43","hashOfConfig":"37"},{"size":4670,"mtime":1602565526686,"results":"44","hashOfConfig":"37"},{"size":42249,"mtime":1606570858278,"results":"45","hashOfConfig":"37"},{"size":7229,"mtime":1606030024799,"results":"46","hashOfConfig":"37"},{"size":1049,"mtime":1602565526655,"results":"47","hashOfConfig":"37"},{"size":76,"mtime":1602565526686,"results":"48","hashOfConfig":"37"},{"size":839,"mtime":1605979155002,"results":"49","hashOfConfig":"37"},{"size":11667,"mtime":1606563979460,"results":"50","hashOfConfig":"37"},{"size":5293,"mtime":1602565526686,"results":"51","hashOfConfig":"37"},{"size":11530,"mtime":1602565526686,"results":"52","hashOfConfig":"37"},{"size":581,"mtime":1602565526686,"results":"53","hashOfConfig":"37"},{"size":12377,"mtime":1602565526686,"results":"54","hashOfConfig":"37"},{"size":13188,"mtime":1602565526655,"results":"55","hashOfConfig":"37"},{"size":15020,"mtime":1606711826481,"results":"56","hashOfConfig":"37"},{"size":1934,"mtime":1606723957148,"results":"57","hashOfConfig":"37"},{"size":1452,"mtime":1607138453338,"results":"58","hashOfConfig":"37"},{"size":891,"mtime":1602565526686,"results":"59","hashOfConfig":"37"},{"size":298,"mtime":1606713129022,"results":"60","hashOfConfig":"37"},{"size":2170,"mtime":1606799896421,"results":"61","hashOfConfig":"37"},{"size":3127,"mtime":1607261207800,"results":"62","hashOfConfig":"37"},{"size":524,"mtime":1606712040897,"results":"63","hashOfConfig":"37"},{"size":5208,"mtime":1602565526686,"results":"64","hashOfConfig":"37"},{"size":1641,"mtime":1607312272298,"results":"65","hashOfConfig":"37"},{"size":10186,"mtime":1607146771135,"results":"66","hashOfConfig":"37"},{"size":3974,"mtime":1607260605622,"results":"67","hashOfConfig":"37"},{"size":6708,"mtime":1602565526671,"results":"68","hashOfConfig":"37"},{"size":7413,"mtime":1602565526671,"results":"69","hashOfConfig":"37"},{"size":7469,"mtime":1602565526686,"results":"70","hashOfConfig":"37"},{"size":4621,"mtime":1602565526671,"results":"71","hashOfConfig":"37"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1uytlax",{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"81"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"85"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"93"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"101"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"104","usedDeprecatedRules":"105"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"115","messages":"116","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"117","messages":"118","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"81"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"131"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"147","messages":"148","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"149","messages":"150","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"151","messages":"152","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"153","messages":"154","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\dev\\material-table-test\\src\\App.tsx",[],"C:\\dev\\material-table-test\\src\\material-table\\components\\m-table-action.js",[],["155","156"],"C:\\dev\\material-table-test\\src\\material-table\\components\\m-table-body-row.js",[],"C:\\dev\\material-table-test\\src\\index.tsx",[],["157","158"],"C:\\dev\\material-table-test\\src\\material-table\\utils\\data-manager.js",["159","160","161","162","163","164","165","166","167"],"import formatDate from \"date-fns/format\";\r\nimport { byString } from \"./\";\r\n\r\nexport default class DataManager {\r\n  applyFilters = false;\r\n  applySearch = false;\r\n  applySort = false;\r\n  currentPage = 0;\r\n  detailPanelType = \"multiple\";\r\n  lastDetailPanelRow = undefined;\r\n  lastEditingRow = undefined;\r\n  orderBy = -1;\r\n  orderDirection = \"\";\r\n  pageSize = 5;\r\n  paging = true;\r\n  parentFunc = null;\r\n  searchText = \"\";\r\n  selectedCount = 0;\r\n  treefiedDataLength = 0;\r\n  treeDataMaxLevel = 0;\r\n  groupedDataLength = 0;\r\n  defaultExpanded = false;\r\n  bulkEditOpen = false;\r\n  bulkEditChangedRows = {};\r\n\r\n  data = [];\r\n  columns = [];\r\n\r\n  filteredData = [];\r\n  searchedData = [];\r\n  groupedData = [];\r\n  treefiedData = [];\r\n  sortedData = [];\r\n  pagedData = [];\r\n  renderData = [];\r\n\r\n  filtered = false;\r\n  searched = false;\r\n  grouped = false;\r\n  treefied = false;\r\n  sorted = false;\r\n  paged = false;\r\n\r\n  rootGroupsIndex = {};\r\n\r\n  constructor() {}\r\n\r\n  setData(data) {\r\n    this.selectedCount = 0;\r\n\r\n    this.data = data.map((row, index) => {\r\n      row.tableData = { ...row.tableData, id: index };\r\n      if (row.tableData.checked) {\r\n        this.selectedCount++;\r\n      }\r\n      return row;\r\n    });\r\n\r\n    this.filtered = false;\r\n  }\r\n\r\n  setColumns(columns) {\r\n    const undefinedWidthColumns = columns.filter((c) =>\r\n      c.width === undefined && c.columnDef\r\n        ? c.columnDef.tableData.width === undefined\r\n        : true && !c.hidden\r\n    );\r\n    let usedWidth = [\"0px\"];\r\n\r\n    this.columns = columns.map((columnDef, index) => {\r\n      columnDef.tableData = {\r\n        columnOrder: index,\r\n        filterValue: columnDef.defaultFilter,\r\n        groupOrder: columnDef.defaultGroupOrder,\r\n        groupSort: columnDef.defaultGroupSort || \"asc\",\r\n        width:\r\n          typeof columnDef.width === \"number\"\r\n            ? columnDef.width + \"px\"\r\n            : columnDef.width,\r\n        initialWidth:\r\n          typeof columnDef.width === \"number\"\r\n            ? columnDef.width + \"px\"\r\n            : columnDef.width,\r\n        additionalWidth: 0,\r\n        ...columnDef.tableData,\r\n        id: index,\r\n      };\r\n\r\n      if (columnDef.tableData.width !== undefined) {\r\n        usedWidth.push(columnDef.tableData.width);\r\n      }\r\n\r\n      return columnDef;\r\n    });\r\n\r\n    usedWidth = \"(\" + usedWidth.join(\" + \") + \")\";\r\n    undefinedWidthColumns.forEach((columnDef) => {\r\n      columnDef.tableData.width = columnDef.tableData.initialWidth = `calc((100% - ${usedWidth}) / ${undefinedWidthColumns.length})`;\r\n    });\r\n  }\r\n\r\n  setDefaultExpanded(expanded) {\r\n    this.defaultExpanded = expanded;\r\n  }\r\n\r\n  changeApplySearch(applySearch) {\r\n    this.applySearch = applySearch;\r\n    this.searched = false;\r\n  }\r\n\r\n  changeApplyFilters(applyFilters) {\r\n    this.applyFilters = applyFilters;\r\n    this.filtered = false;\r\n  }\r\n\r\n  changeApplySort(applySort) {\r\n    this.applySort = applySort;\r\n    this.sorted = false;\r\n  }\r\n\r\n  changePaging(paging) {\r\n    this.paging = paging;\r\n    this.paged = false;\r\n  }\r\n\r\n  changeCurrentPage(currentPage) {\r\n    this.currentPage = currentPage;\r\n    this.paged = false;\r\n  }\r\n\r\n  changePageSize(pageSize) {\r\n    this.pageSize = pageSize;\r\n    this.paged = false;\r\n  }\r\n\r\n  changeParentFunc(parentFunc) {\r\n    this.parentFunc = parentFunc;\r\n  }\r\n\r\n  changeFilterValue(columnId, value) {\r\n    this.columns[columnId].tableData.filterValue = value;\r\n    this.filtered = false;\r\n  }\r\n\r\n  changeRowSelected(checked, path) {\r\n    const rowData = this.findDataByPath(this.sortedData, path);\r\n    rowData.tableData.checked = checked;\r\n    this.selectedCount = this.selectedCount + (checked ? 1 : -1);\r\n\r\n    const checkChildRows = (rowData) => {\r\n      if (rowData.tableData.childRows) {\r\n        rowData.tableData.childRows.forEach((childRow) => {\r\n          if (childRow.tableData.checked !== checked) {\r\n            childRow.tableData.checked = checked;\r\n            this.selectedCount = this.selectedCount + (checked ? 1 : -1);\r\n          }\r\n          checkChildRows(childRow);\r\n        });\r\n      }\r\n    };\r\n\r\n    checkChildRows(rowData);\r\n\r\n    this.filtered = false;\r\n  }\r\n\r\n  changeDetailPanelVisibility(path, render) {\r\n    const rowData = this.findDataByPath(this.sortedData, path);\r\n\r\n    if (\r\n      (rowData.tableData.showDetailPanel || \"\").toString() === render.toString()\r\n    ) {\r\n      rowData.tableData.showDetailPanel = undefined;\r\n    } else {\r\n      rowData.tableData.showDetailPanel = render;\r\n    }\r\n\r\n    if (\r\n      this.detailPanelType === \"single\" &&\r\n      this.lastDetailPanelRow &&\r\n      this.lastDetailPanelRow != rowData\r\n    ) {\r\n      this.lastDetailPanelRow.tableData.showDetailPanel = undefined;\r\n    }\r\n\r\n    this.lastDetailPanelRow = rowData;\r\n  }\r\n\r\n  changeGroupExpand(path) {\r\n    const rowData = this.findDataByPath(this.sortedData, path);\r\n    rowData.isExpanded = !rowData.isExpanded;\r\n  }\r\n\r\n  changeSearchText(searchText) {\r\n    this.searchText = searchText;\r\n    this.searched = false;\r\n    this.currentPage = 0;\r\n  }\r\n\r\n  changeRowEditing(rowData, mode) {\r\n    if (rowData) {\r\n      rowData.tableData.editing = mode;\r\n\r\n      if (this.lastEditingRow && this.lastEditingRow != rowData) {\r\n        this.lastEditingRow.tableData.editing = undefined;\r\n      }\r\n\r\n      if (mode) {\r\n        this.lastEditingRow = rowData;\r\n      } else {\r\n        this.lastEditingRow = undefined;\r\n      }\r\n    } else if (this.lastEditingRow) {\r\n      this.lastEditingRow.tableData.editing = undefined;\r\n      this.lastEditingRow = undefined;\r\n    }\r\n  }\r\n\r\n  changeBulkEditOpen(bulkEditOpen) {\r\n    this.bulkEditOpen = bulkEditOpen;\r\n  }\r\n\r\n  changeAllSelected(checked) {\r\n    let selectedCount = 0;\r\n    if (this.isDataType(\"group\")) {\r\n      const setCheck = (data) => {\r\n        data.forEach((element) => {\r\n          if (element.groups.length > 0) {\r\n            setCheck(element.groups);\r\n          } else {\r\n            element.data.forEach((d) => {\r\n              d.tableData.checked = d.tableData.disabled ? false : checked;\r\n              selectedCount++;\r\n            });\r\n          }\r\n        });\r\n      };\r\n\r\n      setCheck(this.groupedData);\r\n    } else {\r\n      this.searchedData.map((row) => {\r\n        row.tableData.checked = row.tableData.disabled ? false : checked;\r\n        return row;\r\n      });\r\n      selectedCount = this.searchedData.length;\r\n    }\r\n\r\n    this.selectedCount = checked ? selectedCount : 0;\r\n  }\r\n\r\n  changeOrder(orderBy, orderDirection) {\r\n    this.orderBy = orderBy;\r\n    this.orderDirection = orderDirection;\r\n    this.currentPage = 0;\r\n\r\n    this.sorted = false;\r\n  }\r\n\r\n  changeGroupOrder(columnId) {\r\n    const column = this.columns.find((c) => c.tableData.id === columnId);\r\n\r\n    if (column.tableData.groupSort === \"asc\") {\r\n      column.tableData.groupSort = \"desc\";\r\n    } else {\r\n      column.tableData.groupSort = \"asc\";\r\n    }\r\n\r\n    this.sorted = false;\r\n  }\r\n\r\n  changeColumnHidden(column, hidden) {\r\n    column.hidden = hidden;\r\n    column.hiddenByColumnsButton = hidden;\r\n  }\r\n\r\n  changeTreeExpand(path) {\r\n    const rowData = this.findDataByPath(this.sortedData, path);\r\n    rowData.tableData.isTreeExpanded = !rowData.tableData.isTreeExpanded;\r\n  }\r\n\r\n  changeDetailPanelType(type) {\r\n    this.detailPanelType = type;\r\n  }\r\n\r\n  changeByDrag(result) {\r\n    let start = 0;\r\n    let groups = this.columns\r\n      .filter((col) => col.tableData.groupOrder > -1)\r\n      .sort(\r\n        (col1, col2) => col1.tableData.groupOrder - col2.tableData.groupOrder\r\n      );\r\n    if (\r\n      result.destination.droppableId === \"groups\" &&\r\n      result.source.droppableId === \"groups\"\r\n    ) {\r\n      start = Math.min(result.destination.index, result.source.index);\r\n      const end = Math.max(result.destination.index, result.source.index);\r\n      groups = groups.slice(start, end + 1);\r\n      if (result.destination.index < result.source.index) {\r\n        // Take last and add as first\r\n        const last = groups.pop();\r\n        groups.unshift(last);\r\n      } else {\r\n        // Take first and add as last\r\n        const last = groups.shift();\r\n        groups.push(last);\r\n      }\r\n    } else if (\r\n      result.destination.droppableId === \"groups\" &&\r\n      result.source.droppableId === \"headers\"\r\n    ) {\r\n      const newGroup = this.columns.find(\r\n        (c) => c.tableData.id == result.draggableId\r\n      );\r\n      if (newGroup.grouping === false || !newGroup.field) {\r\n        return;\r\n      }\r\n      groups.splice(result.destination.index, 0, newGroup);\r\n    } else if (\r\n      result.destination.droppableId === \"headers\" &&\r\n      result.source.droppableId === \"groups\"\r\n    ) {\r\n      const removeGroup = this.columns.find(\r\n        (c) => c.tableData.id == result.draggableId\r\n      );\r\n      removeGroup.tableData.groupOrder = undefined;\r\n      groups.splice(result.source.index, 1);\r\n    } else if (\r\n      result.destination.droppableId === \"headers\" &&\r\n      result.source.droppableId === \"headers\"\r\n    ) {\r\n      start = Math.min(result.destination.index, result.source.index);\r\n      const end = Math.max(result.destination.index, result.source.index);\r\n\r\n      // get the effective start and end considering hidden columns\r\n      const sorted = [...this.columns]\r\n        .sort((a, b) => a.tableData.columnOrder - b.tableData.columnOrder)\r\n        .filter((column) => column.tableData.groupOrder === undefined);\r\n      let numHiddenBeforeStart = 0;\r\n      let numVisibleBeforeStart = 0;\r\n\r\n      for (\r\n        let i = 0;\r\n        i < sorted.length && numVisibleBeforeStart <= start;\r\n        i++\r\n      ) {\r\n        if (sorted[i].hidden) {\r\n          numHiddenBeforeStart++;\r\n        } else {\r\n          numVisibleBeforeStart++;\r\n        }\r\n      }\r\n      const effectiveStart = start + numHiddenBeforeStart;\r\n\r\n      let effectiveEnd = effectiveStart;\r\n      for (\r\n        let numVisibleInRange = 0;\r\n        numVisibleInRange < end - start && effectiveEnd < sorted.length;\r\n        effectiveEnd++\r\n      ) {\r\n        if (!sorted[effectiveEnd].hidden) {\r\n          numVisibleInRange++;\r\n        }\r\n      }\r\n      const colsToMov = sorted.slice(effectiveStart, effectiveEnd + 1);\r\n\r\n      if (result.destination.index < result.source.index) {\r\n        // Take last and add as first\r\n        const last = colsToMov.pop();\r\n        colsToMov.unshift(last);\r\n      } else {\r\n        // Take first and add as last\r\n        const last = colsToMov.shift();\r\n        colsToMov.push(last);\r\n      }\r\n\r\n      for (let i = 0; i < colsToMov.length; i++) {\r\n        colsToMov[i].tableData.columnOrder = effectiveStart + i;\r\n      }\r\n\r\n      return;\r\n    } else {\r\n      return;\r\n    }\r\n    for (let i = 0; i < groups.length; i++) {\r\n      groups[i].tableData.groupOrder = start + i;\r\n    }\r\n    this.sorted = this.grouped = false;\r\n  }\r\n\r\n  startCellEditable = (rowData, columnDef) => {\r\n    rowData.tableData.editCellList = [\r\n      ...(rowData.tableData.editCellList || []),\r\n      columnDef,\r\n    ];\r\n  };\r\n\r\n  finishCellEditable = (rowData, columnDef) => {\r\n    if (rowData.tableData.editCellList) {\r\n      var index = rowData.tableData.editCellList.findIndex(\r\n        (c) => c.tableData.id === columnDef.tableData.id\r\n      );\r\n      if (index !== -1) {\r\n        rowData.tableData.editCellList.splice(index, 1);\r\n      }\r\n    }\r\n  };\r\n\r\n  clearBulkEditChangedRows = () => {\r\n    this.bulkEditChangedRows = {};\r\n  };\r\n\r\n  onBulkEditRowChanged = (oldData, newData) => {\r\n    this.bulkEditChangedRows[oldData.tableData.id] = {\r\n      oldData,\r\n      newData,\r\n    };\r\n  };\r\n\r\n  onColumnResized(id, additionalWidth) {\r\n    const column = this.columns.find((c) => c.tableData.id === id);\r\n    if (!column) return;\r\n\r\n    const nextColumn = this.columns.find((c) => c.tableData.id === id + 1);\r\n    if (!nextColumn) return;\r\n\r\n    // console.log(\"S i: \" + column.tableData.initialWidth);\r\n    // console.log(\"S a: \" + column.tableData.additionalWidth);\r\n    // console.log(\"S w: \" + column.tableData.width);\r\n\r\n    column.tableData.additionalWidth = additionalWidth;\r\n    column.tableData.width = `calc(${column.tableData.initialWidth} + ${column.tableData.additionalWidth}px)`;\r\n\r\n    // nextColumn.tableData.additionalWidth = -1 * additionalWidth;\r\n    // nextColumn.tableData.width = `calc(${nextColumn.tableData.initialWidth} + ${nextColumn.tableData.additionalWidth}px)`;\r\n\r\n    // console.log(\"F i: \" + column.tableData.initialWidth);\r\n    // console.log(\"F a: \" + column.tableData.additionalWidth);\r\n    // console.log(\"F w: \" + column.tableData.width);\r\n  }\r\n\r\n  expandTreeForNodes = (data) => {\r\n    data.forEach((row) => {\r\n      let currentRow = row;\r\n      while (this.parentFunc(currentRow, this.data)) {\r\n        let parent = this.parentFunc(currentRow, this.data);\r\n        if (parent) {\r\n          parent.tableData.isTreeExpanded = true;\r\n        }\r\n        currentRow = parent;\r\n      }\r\n    });\r\n  };\r\n\r\n  findDataByPath = (renderData, path) => {\r\n    if (this.isDataType(\"tree\")) {\r\n      const node = path.reduce(\r\n        (result, current) => {\r\n          return (\r\n            result &&\r\n            result.tableData &&\r\n            result.tableData.childRows &&\r\n            result.tableData.childRows[current]\r\n          );\r\n        },\r\n        { tableData: { childRows: renderData } }\r\n      );\r\n\r\n      return node;\r\n    } else {\r\n      const data = { groups: renderData };\r\n\r\n      const node = path.reduce((result, current) => {\r\n        if (result.groups.length > 0) {\r\n          return result.groups[current];\r\n        } else if (result.data) {\r\n          return result.data[current];\r\n        } else {\r\n          return undefined;\r\n        }\r\n      }, data);\r\n      return node;\r\n    }\r\n  };\r\n\r\n  findGroupByGroupPath(renderData, path) {\r\n    const data = { groups: renderData, groupsIndex: this.rootGroupsIndex };\r\n\r\n    const node = path.reduce((result, current) => {\r\n      if (!result) {\r\n        return undefined;\r\n      }\r\n\r\n      if (result.groupsIndex[current] !== undefined) {\r\n        return result.groups[result.groupsIndex[current]];\r\n      }\r\n      return undefined;\r\n      // const group = result.groups.find(a => a.value === current);\r\n      // return group;\r\n    }, data);\r\n    return node;\r\n  }\r\n\r\n  getFieldValue = (rowData, columnDef, lookup = true) => {\r\n    let value =\r\n      typeof rowData[columnDef.field] !== \"undefined\"\r\n        ? rowData[columnDef.field]\r\n        : byString(rowData, columnDef.field);\r\n    if (columnDef.lookup && lookup) {\r\n      value = columnDef.lookup[value];\r\n    }\r\n\r\n    return value;\r\n  };\r\n\r\n  isDataType(type) {\r\n    let dataType = \"normal\";\r\n\r\n    if (this.parentFunc) {\r\n      dataType = \"tree\";\r\n    } else if (this.columns.find((a) => a.tableData.groupOrder > -1)) {\r\n      dataType = \"group\";\r\n    }\r\n\r\n    return type === dataType;\r\n  }\r\n\r\n  sort(a, b, type) {\r\n    if (type === \"numeric\") {\r\n      return a - b;\r\n    } else {\r\n      if (a !== b) {\r\n        // to find nulls\r\n        if (!a) return -1;\r\n        if (!b) return 1;\r\n      }\r\n      return a < b ? -1 : a > b ? 1 : 0;\r\n    }\r\n  }\r\n\r\n  sortList(list) {\r\n    const columnDef = this.columns.find((_) => _.tableData.id === this.orderBy);\r\n    let result = list;\r\n\r\n    if (columnDef.customSort) {\r\n      if (this.orderDirection === \"desc\") {\r\n        result = list.sort((a, b) => columnDef.customSort(b, a, \"row\", \"desc\"));\r\n      } else {\r\n        result = list.sort((a, b) => columnDef.customSort(a, b, \"row\"));\r\n      }\r\n    } else {\r\n      result = list.sort(\r\n        this.orderDirection === \"desc\"\r\n          ? (a, b) =>\r\n              this.sort(\r\n                this.getFieldValue(b, columnDef),\r\n                this.getFieldValue(a, columnDef),\r\n                columnDef.type\r\n              )\r\n          : (a, b) =>\r\n              this.sort(\r\n                this.getFieldValue(a, columnDef),\r\n                this.getFieldValue(b, columnDef),\r\n                columnDef.type\r\n              )\r\n      );\r\n    }\r\n\r\n    return result;\r\n  }\r\n\r\n  getRenderState = () => {\r\n    if (this.filtered === false) {\r\n      this.filterData();\r\n    }\r\n\r\n    if (this.searched === false) {\r\n      this.searchData();\r\n    }\r\n\r\n    if (this.grouped === false && this.isDataType(\"group\")) {\r\n      this.groupData();\r\n    }\r\n\r\n    if (this.treefied === false && this.isDataType(\"tree\")) {\r\n      this.treefyData();\r\n    }\r\n\r\n    if (this.sorted === false) {\r\n      this.sortData();\r\n    }\r\n\r\n    if (this.paged === false) {\r\n      this.pageData();\r\n    }\r\n\r\n    return {\r\n      columns: this.columns,\r\n      currentPage: this.currentPage,\r\n      data: this.sortedData,\r\n      lastEditingRow: this.lastEditingRow,\r\n      orderBy: this.orderBy,\r\n      orderDirection: this.orderDirection,\r\n      originalData: this.data,\r\n      pageSize: this.pageSize,\r\n      renderData: this.pagedData,\r\n      searchText: this.searchText,\r\n      selectedCount: this.selectedCount,\r\n      treefiedDataLength: this.treefiedDataLength,\r\n      treeDataMaxLevel: this.treeDataMaxLevel,\r\n      groupedDataLength: this.groupedDataLength,\r\n    };\r\n  };\r\n\r\n  // =====================================================================================================\r\n  // DATA MANUPULATIONS\r\n  // =====================================================================================================\r\n\r\n  filterData = () => {\r\n    this.searched = this.grouped = this.treefied = this.sorted = this.paged = false;\r\n\r\n    this.filteredData = [...this.data];\r\n\r\n    if (this.applyFilters) {\r\n      this.columns\r\n        .filter((columnDef) => columnDef.tableData.filterValue)\r\n        .forEach((columnDef) => {\r\n          const { lookup, type, tableData } = columnDef;\r\n          if (columnDef.customFilterAndSearch) {\r\n            this.filteredData = this.filteredData.filter(\r\n              (row) =>\r\n                !!columnDef.customFilterAndSearch(\r\n                  tableData.filterValue,\r\n                  row,\r\n                  columnDef\r\n                )\r\n            );\r\n          } else {\r\n            if (lookup) {\r\n              this.filteredData = this.filteredData.filter((row) => {\r\n                const value = this.getFieldValue(row, columnDef, false);\r\n                return (\r\n                  !tableData.filterValue ||\r\n                  tableData.filterValue.length === 0 ||\r\n                  tableData.filterValue.indexOf(\r\n                    value !== undefined && value !== null && value.toString()\r\n                  ) > -1\r\n                );\r\n              });\r\n            } else if (type === \"numeric\") {\r\n              this.filteredData = this.filteredData.filter((row) => {\r\n                const value = this.getFieldValue(row, columnDef);\r\n                return value + \"\" === tableData.filterValue;\r\n              });\r\n            } else if (type === \"boolean\" && tableData.filterValue) {\r\n              this.filteredData = this.filteredData.filter((row) => {\r\n                const value = this.getFieldValue(row, columnDef);\r\n                return (\r\n                  (value && tableData.filterValue === \"checked\") ||\r\n                  (!value && tableData.filterValue === \"unchecked\")\r\n                );\r\n              });\r\n            } else if ([\"date\", \"datetime\"].includes(type)) {\r\n              this.filteredData = this.filteredData.filter((row) => {\r\n                const value = this.getFieldValue(row, columnDef);\r\n\r\n                const currentDate = value ? new Date(value) : null;\r\n\r\n                if (currentDate && currentDate.toString() !== \"Invalid Date\") {\r\n                  const selectedDate = tableData.filterValue;\r\n                  let currentDateToCompare = \"\";\r\n                  let selectedDateToCompare = \"\";\r\n\r\n                  if (type === \"date\") {\r\n                    currentDateToCompare = formatDate(\r\n                      currentDate,\r\n                      \"MM/dd/yyyy\"\r\n                    );\r\n                    selectedDateToCompare = formatDate(\r\n                      selectedDate,\r\n                      \"MM/dd/yyyy\"\r\n                    );\r\n                  } else if (type === \"datetime\") {\r\n                    currentDateToCompare = formatDate(\r\n                      currentDate,\r\n                      \"MM/dd/yyyy - HH:mm\"\r\n                    );\r\n                    selectedDateToCompare = formatDate(\r\n                      selectedDate,\r\n                      \"MM/dd/yyyy - HH:mm\"\r\n                    );\r\n                  }\r\n\r\n                  return currentDateToCompare === selectedDateToCompare;\r\n                }\r\n\r\n                return true;\r\n              });\r\n            } else if (type === \"time\") {\r\n              this.filteredData = this.filteredData.filter((row) => {\r\n                const value = this.getFieldValue(row, columnDef);\r\n                const currentHour = value || null;\r\n\r\n                if (currentHour) {\r\n                  const selectedHour = tableData.filterValue;\r\n                  const currentHourToCompare = formatDate(\r\n                    selectedHour,\r\n                    \"HH:mm\"\r\n                  );\r\n\r\n                  return currentHour === currentHourToCompare;\r\n                }\r\n\r\n                return true;\r\n              });\r\n            } else {\r\n              this.filteredData = this.filteredData.filter((row) => {\r\n                const value = this.getFieldValue(row, columnDef);\r\n                return (\r\n                  value &&\r\n                  value\r\n                    .toString()\r\n                    .toUpperCase()\r\n                    .includes(tableData.filterValue.toUpperCase())\r\n                );\r\n              });\r\n            }\r\n          }\r\n        });\r\n    }\r\n\r\n    this.filtered = true;\r\n  };\r\n\r\n  searchData = () => {\r\n    this.grouped = this.treefied = this.sorted = this.paged = false;\r\n\r\n    this.searchedData = [...this.filteredData];\r\n\r\n    if (this.searchText && this.applySearch) {\r\n      const trimmedSearchText = this.searchText.trim();\r\n      this.searchedData = this.searchedData.filter((row) => {\r\n        return this.columns\r\n          .filter((columnDef) => {\r\n            return columnDef.searchable === undefined\r\n              ? !columnDef.hidden\r\n              : columnDef.searchable;\r\n          })\r\n          .some((columnDef) => {\r\n            if (columnDef.customFilterAndSearch) {\r\n              return !!columnDef.customFilterAndSearch(\r\n                trimmedSearchText,\r\n                row,\r\n                columnDef\r\n              );\r\n            } else if (columnDef.field) {\r\n              const value = this.getFieldValue(row, columnDef);\r\n              if (value) {\r\n                return value\r\n                  .toString()\r\n                  .toUpperCase()\r\n                  .includes(trimmedSearchText.toUpperCase());\r\n              }\r\n            }\r\n          });\r\n      });\r\n    }\r\n    this.searched = true;\r\n  };\r\n\r\n  groupData() {\r\n    this.sorted = this.paged = false;\r\n    this.groupedDataLength = 0;\r\n\r\n    const tmpData = [...this.searchedData];\r\n\r\n    const groups = this.columns\r\n      .filter((col) => col.tableData.groupOrder > -1)\r\n      .sort(\r\n        (col1, col2) => col1.tableData.groupOrder - col2.tableData.groupOrder\r\n      );\r\n\r\n    const subData = tmpData.reduce(\r\n      (result, currentRow) => {\r\n        let object = result;\r\n        object = groups.reduce((o, colDef) => {\r\n          const value =\r\n            currentRow[colDef.field] || byString(currentRow, colDef.field);\r\n\r\n          let group;\r\n          if (o.groupsIndex[value] !== undefined) {\r\n            group = o.groups[o.groupsIndex[value]];\r\n          }\r\n\r\n          if (!group) {\r\n            const path = [...(o.path || []), value];\r\n            let oldGroup = this.findGroupByGroupPath(\r\n              this.groupedData,\r\n              path\r\n            ) || {\r\n              isExpanded:\r\n                typeof this.defaultExpanded === \"boolean\"\r\n                  ? this.defaultExpanded\r\n                  : false,\r\n            };\r\n\r\n            group = {\r\n              value,\r\n              groups: [],\r\n              groupsIndex: {},\r\n              data: [],\r\n              isExpanded: oldGroup.isExpanded,\r\n              path: path,\r\n            };\r\n            o.groups.push(group);\r\n            o.groupsIndex[value] = o.groups.length - 1;\r\n          }\r\n          return group;\r\n        }, object);\r\n\r\n        object.data.push(currentRow);\r\n        this.groupedDataLength++;\r\n\r\n        return result;\r\n      },\r\n      { groups: [], groupsIndex: {} }\r\n    );\r\n\r\n    this.groupedData = subData.groups;\r\n    this.grouped = true;\r\n    this.rootGroupsIndex = subData.groupsIndex;\r\n  }\r\n\r\n  treefyData() {\r\n    this.sorted = this.paged = false;\r\n    this.data.forEach((a) => (a.tableData.childRows = null));\r\n    this.treefiedData = [];\r\n    this.treefiedDataLength = 0;\r\n    this.treeDataMaxLevel = 0;\r\n\r\n    // if filter or search is enabled, collapse the tree\r\n    if (\r\n      this.searchText ||\r\n      this.columns.some((columnDef) => columnDef.tableData.filterValue)\r\n    ) {\r\n      this.data.forEach((row) => {\r\n        row.tableData.isTreeExpanded = false;\r\n      });\r\n\r\n      // expand the tree for all nodes present after filtering and searching\r\n      this.expandTreeForNodes(this.searchedData);\r\n    }\r\n\r\n    const addRow = (rowData) => {\r\n      rowData.tableData.markedForTreeRemove = false;\r\n      let parent = this.parentFunc(rowData, this.data);\r\n      if (parent) {\r\n        parent.tableData.childRows = parent.tableData.childRows || [];\r\n        if (!parent.tableData.childRows.includes(rowData)) {\r\n          parent.tableData.childRows.push(rowData);\r\n          this.treefiedDataLength++;\r\n        }\r\n\r\n        addRow(parent);\r\n\r\n        rowData.tableData.path = [\r\n          ...parent.tableData.path,\r\n          parent.tableData.childRows.length - 1,\r\n        ];\r\n        this.treeDataMaxLevel = Math.max(\r\n          this.treeDataMaxLevel,\r\n          rowData.tableData.path.length\r\n        );\r\n      } else {\r\n        if (!this.treefiedData.includes(rowData)) {\r\n          this.treefiedData.push(rowData);\r\n          this.treefiedDataLength++;\r\n          rowData.tableData.path = [this.treefiedData.length - 1];\r\n        }\r\n      }\r\n    };\r\n\r\n    // Add all rows initially\r\n    this.data.forEach((rowData) => {\r\n      addRow(rowData);\r\n    });\r\n    const markForTreeRemove = (rowData) => {\r\n      let pointer = this.treefiedData;\r\n      rowData.tableData.path.forEach((pathPart) => {\r\n        if (pointer.tableData && pointer.tableData.childRows) {\r\n          pointer = pointer.tableData.childRows;\r\n        }\r\n        pointer = pointer[pathPart];\r\n      });\r\n      pointer.tableData.markedForTreeRemove = true;\r\n    };\r\n\r\n    const traverseChildrenAndUnmark = (rowData) => {\r\n      if (rowData.tableData.childRows) {\r\n        rowData.tableData.childRows.forEach((row) => {\r\n          traverseChildrenAndUnmark(row);\r\n        });\r\n      }\r\n      rowData.tableData.markedForTreeRemove = false;\r\n    };\r\n\r\n    // for all data rows, restore initial expand if no search term is available and remove items that shouldn't be there\r\n    this.data.forEach((rowData) => {\r\n      if (\r\n        !this.searchText &&\r\n        !this.columns.some((columnDef) => columnDef.tableData.filterValue)\r\n      ) {\r\n        if (rowData.tableData.isTreeExpanded === undefined) {\r\n          var isExpanded =\r\n            typeof this.defaultExpanded === \"boolean\"\r\n              ? this.defaultExpanded\r\n              : this.defaultExpanded(rowData);\r\n          rowData.tableData.isTreeExpanded = isExpanded;\r\n        }\r\n      }\r\n      const hasSearchMatchedChildren = rowData.tableData.isTreeExpanded;\r\n\r\n      if (!hasSearchMatchedChildren && this.searchedData.indexOf(rowData) < 0) {\r\n        markForTreeRemove(rowData);\r\n      }\r\n    });\r\n\r\n    // preserve all children of nodes that are matched by search or filters\r\n    this.data.forEach((rowData) => {\r\n      if (this.searchedData.indexOf(rowData) > -1) {\r\n        traverseChildrenAndUnmark(rowData);\r\n      }\r\n    });\r\n\r\n    const traverseTreeAndDeleteMarked = (rowDataArray) => {\r\n      for (var i = rowDataArray.length - 1; i >= 0; i--) {\r\n        const item = rowDataArray[i];\r\n        if (item.tableData.childRows) {\r\n          traverseTreeAndDeleteMarked(item.tableData.childRows);\r\n        }\r\n        if (item.tableData.markedForTreeRemove) rowDataArray.splice(i, 1);\r\n      }\r\n    };\r\n\r\n    traverseTreeAndDeleteMarked(this.treefiedData);\r\n    this.treefied = true;\r\n  }\r\n\r\n  sortData() {\r\n    this.paged = false;\r\n\r\n    if (this.isDataType(\"group\")) {\r\n      this.sortedData = [...this.groupedData];\r\n\r\n      const groups = this.columns\r\n        .filter((col) => col.tableData.groupOrder > -1)\r\n        .sort(\r\n          (col1, col2) => col1.tableData.groupOrder - col2.tableData.groupOrder\r\n        );\r\n\r\n      const sortGroups = (list, columnDef) => {\r\n        if (columnDef.customSort) {\r\n          return list.sort(\r\n            columnDef.tableData.groupSort === \"desc\"\r\n              ? (a, b) => columnDef.customSort(b.value, a.value, \"group\")\r\n              : (a, b) => columnDef.customSort(a.value, b.value, \"group\")\r\n          );\r\n        } else {\r\n          return list.sort(\r\n            columnDef.tableData.groupSort === \"desc\"\r\n              ? (a, b) => this.sort(b.value, a.value, columnDef.type)\r\n              : (a, b) => this.sort(a.value, b.value, columnDef.type)\r\n          );\r\n        }\r\n      };\r\n\r\n      this.sortedData = sortGroups(this.sortedData, groups[0]);\r\n\r\n      const sortGroupData = (list, level) => {\r\n        list.forEach((element) => {\r\n          if (element.groups.length > 0) {\r\n            const column = groups[level];\r\n            element.groups = sortGroups(element.groups, column);\r\n            sortGroupData(element.groups, level + 1);\r\n          } else {\r\n            if (this.orderBy >= 0 && this.orderDirection) {\r\n              element.data = this.sortList(element.data);\r\n            }\r\n          }\r\n        });\r\n      };\r\n\r\n      sortGroupData(this.sortedData, 1);\r\n    } else if (this.isDataType(\"tree\")) {\r\n      this.sortedData = [...this.treefiedData];\r\n      if (this.orderBy != -1) {\r\n        this.sortedData = this.sortList(this.sortedData);\r\n\r\n        const sortTree = (list) => {\r\n          list.forEach((item) => {\r\n            if (item.tableData.childRows) {\r\n              item.tableData.childRows = this.sortList(\r\n                item.tableData.childRows\r\n              );\r\n              sortTree(item.tableData.childRows);\r\n            }\r\n          });\r\n        };\r\n\r\n        sortTree(this.sortedData);\r\n      }\r\n    } else if (this.isDataType(\"normal\")) {\r\n      this.sortedData = [...this.searchedData];\r\n      if (this.orderBy != -1 && this.applySort) {\r\n        this.sortedData = this.sortList(this.sortedData);\r\n      }\r\n    }\r\n\r\n    this.sorted = true;\r\n  }\r\n\r\n  pageData() {\r\n    this.pagedData = [...this.sortedData];\r\n\r\n    if (this.paging) {\r\n      const startIndex = this.currentPage * this.pageSize;\r\n      const endIndex = startIndex + this.pageSize;\r\n\r\n      this.pagedData = this.pagedData.slice(startIndex, endIndex);\r\n    }\r\n\r\n    this.paged = true;\r\n  }\r\n}\r\n\r\nconst printColumn = (col) => ({\r\n  ...col,\r\n  tableData: {\r\n    id: col.tableData.id,\r\n    columnOrder: col.tableData.columnOrder,\r\n  },\r\n});\r\n",["168","169"],"C:\\dev\\material-table-test\\src\\material-table\\components\\m-table-filter-row.js",[],["170","171"],"C:\\dev\\material-table-test\\src\\material-table\\index.js",[],"C:\\dev\\material-table-test\\src\\material-table\\components\\m-table-groupbar.js",[],["172","173"],"C:\\dev\\material-table-test\\src\\material-table\\material-table.js",[],"C:\\dev\\material-table-test\\src\\material-table\\default-props.js",[],["174","175"],"C:\\dev\\material-table-test\\src\\material-table\\components\\index.js",[],["176","177"],"C:\\dev\\material-table-test\\src\\material-table\\utils\\polyfill\\index.js",["178"],"\"use strict\";\r\nif (!Array.prototype.find) {\r\n  require(\"./array.find\");\r\n}\r\n",["179","180"],"C:\\dev\\material-table-test\\src\\material-table\\utils\\common-values.js",[],"C:\\dev\\material-table-test\\src\\material-table\\components\\m-table-header.js",[],["181","182"],"C:\\dev\\material-table-test\\src\\material-table\\components\\m-table-stepped-pagination.js",[],"C:\\dev\\material-table-test\\src\\material-table\\prop-types.js",[],"C:\\dev\\material-table-test\\src\\material-table\\utils\\polyfill\\array.find.js",["183"],"C:\\dev\\material-table-test\\src\\material-table\\components\\m-table-edit-row.js",["184","185","186"],"C:\\dev\\material-table-test\\src\\material-table\\components\\m-table-body.js",[],"C:\\dev\\material-table-test\\src\\material-table\\components\\m-table-toolbar.js",[],"C:\\dev\\material-table-test\\src\\components\\TableSearch.tsx",[],"C:\\dev\\material-table-test\\src\\components\\TableToolbar.tsx",[],"C:\\dev\\material-table-test\\src\\material-table\\utils\\index.js",[],"C:\\dev\\material-table-test\\src\\components\\index.ts",[],["187","188"],"C:\\dev\\material-table-test\\src\\components\\ColumnsButton.tsx",[],"C:\\dev\\material-table-test\\src\\components\\ExportButton.tsx",[],"C:\\dev\\material-table-test\\src\\components\\TableTitle.tsx",[],["189","190"],"C:\\dev\\material-table-test\\src\\material-table\\components\\m-table-pagination.js",[],"C:\\dev\\material-table-test\\src\\utils\\export-data.ts",[],"C:\\dev\\material-table-test\\src\\mock-data.ts",[],"C:\\dev\\material-table-test\\src\\mock-columns.ts",[],"C:\\dev\\material-table-test\\src\\material-table\\components\\m-table-cell.js",[],"C:\\dev\\material-table-test\\src\\material-table\\components\\m-table-edit-field.js",[],"C:\\dev\\material-table-test\\src\\material-table\\components\\m-table-group-row.js",[],"C:\\dev\\material-table-test\\src\\material-table\\components\\m-table-edit-cell.js",[],{"ruleId":"191","replacedBy":"192"},{"ruleId":"193","replacedBy":"194"},{"ruleId":"191","replacedBy":"195"},{"ruleId":"193","replacedBy":"196"},{"ruleId":"197","severity":1,"message":"198","line":46,"column":3,"nodeType":"199","messageId":"200","endLine":46,"endColumn":19},{"ruleId":"201","severity":1,"message":"202","line":181,"column":31,"nodeType":"203","messageId":"204","endLine":181,"endColumn":33},{"ruleId":"201","severity":1,"message":"202","line":204,"column":54,"nodeType":"203","messageId":"204","endLine":204,"endColumn":56},{"ruleId":"201","severity":1,"message":"205","line":313,"column":31,"nodeType":"203","messageId":"204","endLine":313,"endColumn":33},{"ruleId":"201","severity":1,"message":"205","line":324,"column":31,"nodeType":"203","messageId":"204","endLine":324,"endColumn":33},{"ruleId":"206","severity":1,"message":"207","line":749,"column":29,"nodeType":"208","messageId":"209","endLine":749,"endColumn":31},{"ruleId":"201","severity":1,"message":"202","line":996,"column":24,"nodeType":"203","messageId":"204","endLine":996,"endColumn":26},{"ruleId":"201","severity":1,"message":"202","line":1014,"column":24,"nodeType":"203","messageId":"204","endLine":1014,"endColumn":26},{"ruleId":"210","severity":1,"message":"211","line":1036,"column":7,"nodeType":"212","messageId":"213","endLine":1036,"endColumn":18},{"ruleId":"191","replacedBy":"214"},{"ruleId":"193","replacedBy":"215"},{"ruleId":"191","replacedBy":"216"},{"ruleId":"193","replacedBy":"217"},{"ruleId":"191","replacedBy":"218"},{"ruleId":"193","replacedBy":"219"},{"ruleId":"191","replacedBy":"220"},{"ruleId":"193","replacedBy":"221"},{"ruleId":"191","replacedBy":"222"},{"ruleId":"193","replacedBy":"223"},{"ruleId":"224","severity":1,"message":"225","line":1,"column":1,"nodeType":"226","messageId":"227","endLine":1,"endColumn":14,"fix":"228"},{"ruleId":"191","replacedBy":"229"},{"ruleId":"193","replacedBy":"230"},{"ruleId":"191","replacedBy":"231"},{"ruleId":"193","replacedBy":"232"},{"ruleId":"233","severity":1,"message":"234","line":1,"column":1,"nodeType":"235","messageId":"204","endLine":22,"endColumn":3},{"ruleId":"236","severity":1,"message":"237","line":108,"column":13,"nodeType":"238","messageId":"239","endLine":118,"endColumn":14},{"ruleId":"206","severity":1,"message":"240","line":182,"column":55,"nodeType":"208","messageId":"209","endLine":182,"endColumn":57},{"ruleId":"236","severity":1,"message":"237","line":185,"column":9,"nodeType":"238","messageId":"239","endLine":192,"endColumn":10},{"ruleId":"191","replacedBy":"218"},{"ruleId":"193","replacedBy":"219"},{"ruleId":"191","replacedBy":"241"},{"ruleId":"193","replacedBy":"242"},"no-native-reassign",["243"],"no-negated-in-lhs",["244"],["243"],["244"],"no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","Expected '===' and instead saw '=='.","array-callback-return","Array.prototype.some() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","no-unused-vars","'printColumn' is assigned a value but never used.","Identifier","unusedVar",["243"],["244"],["243"],["244"],["243"],["244"],["243"],["244"],["243"],["244"],"strict","'use strict' is unnecessary inside of modules.","ExpressionStatement","module",{"range":"245","text":"246"},["243"],["244"],["243"],["244"],"no-extend-native","Array prototype is read only, properties should not be added.","CallExpression","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","Array.prototype.every() expects a value to be returned at the end of arrow function.",["243"],["244"],"no-global-assign","no-unsafe-negation",[0,13],""]